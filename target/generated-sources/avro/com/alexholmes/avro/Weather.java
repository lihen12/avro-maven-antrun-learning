/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.alexholmes.avro;  
@SuppressWarnings("all")
/** A weather reading. */
@org.apache.avro.specific.AvroGenerated
public class Weather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Weather\",\"namespace\":\"com.alexholmes.avro\",\"doc\":\"A weather reading.\",\"fields\":[{\"name\":\"station\",\"type\":\"string\",\"order\":\"ignore\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"temp\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence station;
  @Deprecated public long time;
  @Deprecated public int temp;

  /**
   * Default constructor.
   */
  public Weather() {}

  /**
   * All-args constructor.
   */
  public Weather(java.lang.CharSequence station, java.lang.Long time, java.lang.Integer temp) {
    this.station = station;
    this.time = time;
    this.temp = temp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return station;
    case 1: return time;
    case 2: return temp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: station = (java.lang.CharSequence)value$; break;
    case 1: time = (java.lang.Long)value$; break;
    case 2: temp = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'station' field.
   */
  public java.lang.CharSequence getStation() {
    return station;
  }

  /**
   * Sets the value of the 'station' field.
   * @param value the value to set.
   */
  public void setStation(java.lang.CharSequence value) {
    this.station = value;
  }

  /**
   * Gets the value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'temp' field.
   */
  public java.lang.Integer getTemp() {
    return temp;
  }

  /**
   * Sets the value of the 'temp' field.
   * @param value the value to set.
   */
  public void setTemp(java.lang.Integer value) {
    this.temp = value;
  }

  /** Creates a new Weather RecordBuilder */
  public static com.alexholmes.avro.Weather.Builder newBuilder() {
    return new com.alexholmes.avro.Weather.Builder();
  }
  
  /** Creates a new Weather RecordBuilder by copying an existing Builder */
  public static com.alexholmes.avro.Weather.Builder newBuilder(com.alexholmes.avro.Weather.Builder other) {
    return new com.alexholmes.avro.Weather.Builder(other);
  }
  
  /** Creates a new Weather RecordBuilder by copying an existing Weather instance */
  public static com.alexholmes.avro.Weather.Builder newBuilder(com.alexholmes.avro.Weather other) {
    return new com.alexholmes.avro.Weather.Builder(other);
  }
  
  /**
   * RecordBuilder for Weather instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Weather>
    implements org.apache.avro.data.RecordBuilder<Weather> {

    private java.lang.CharSequence station;
    private long time;
    private int temp;

    /** Creates a new Builder */
    private Builder() {
      super(com.alexholmes.avro.Weather.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.alexholmes.avro.Weather.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Weather instance */
    private Builder(com.alexholmes.avro.Weather other) {
            super(com.alexholmes.avro.Weather.SCHEMA$);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temp)) {
        this.temp = data().deepCopy(fields()[2].schema(), other.temp);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'station' field */
    public java.lang.CharSequence getStation() {
      return station;
    }
    
    /** Sets the value of the 'station' field */
    public com.alexholmes.avro.Weather.Builder setStation(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.station = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'station' field has been set */
    public boolean hasStation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'station' field */
    public com.alexholmes.avro.Weather.Builder clearStation() {
      station = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'time' field */
    public java.lang.Long getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public com.alexholmes.avro.Weather.Builder setTime(long value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'time' field */
    public com.alexholmes.avro.Weather.Builder clearTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'temp' field */
    public java.lang.Integer getTemp() {
      return temp;
    }
    
    /** Sets the value of the 'temp' field */
    public com.alexholmes.avro.Weather.Builder setTemp(int value) {
      validate(fields()[2], value);
      this.temp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'temp' field has been set */
    public boolean hasTemp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'temp' field */
    public com.alexholmes.avro.Weather.Builder clearTemp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Weather build() {
      try {
        Weather record = new Weather();
        record.station = fieldSetFlags()[0] ? this.station : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (java.lang.Long) defaultValue(fields()[1]);
        record.temp = fieldSetFlags()[2] ? this.temp : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
